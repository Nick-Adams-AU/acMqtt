--[[
Event-based, name: "MQTT lastlevel"

Maintain CBus 'lastlevels'

Used so that MQTT 'on' events can return a light/fan/blind to the last known set level.
Only monitors lighting application groups.

Home Assistant with an MQTT integration and Google assistant only allows for on/off
("Hey Google, turn on the dunny light"), and not remembering the previous level set, so
this script, in conjunction with the MQTT script works around that. Setting another level
is not affected - just "on" commands.
--]]

logging = false
lighting = {['56']=true} -- Array of applications that are used for lighting


function saveLastLevel()
  -- Get old levels to see if anything changed
  local oldLastLevel = storage.get('lastlvl', {})
  local changed = {}
  local k, v

  for k, v in pairs(lastLevel) do
    if oldLastLevel[k] == nil or oldLastLevel[k] ~= v then -- Add to changes
      changed[#changed + 1] = k..' '..tostring(oldLastLevel[k])..'->'..tostring(v)
    end
  end
  
  if #changed then
    storage.set('lastlvl', lastLevel)
    log('Saved last levels. Object(s) changed: '..table.concat(changed, ', '))
  end
end


val = event.getvalue()
alias = event.dst
lastLevel = storage.get('lastlvl', {})
parts = string.split(alias, '/')
net = tonumber(parts[1])
app = tonumber(parts[2])
group = tonumber(parts[3])

if val ~= 0 and lighting[parts[2]] and val == GetCBusTargetLevel(net, app, group) then
  if val ~= lastLevel[alias] then
    lastLevel[alias] = val
    if logging then log('Set lastLevel to '..val..' for '..alias) end
    saveLastLevel()
  end
end
