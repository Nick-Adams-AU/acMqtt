--[[
Event-based, execute during ramping, name: "HUE"

Pushes HUE events to resident script via socket.

Tag required objects with the "HUE" keyword and this script will run whenever one of those objects change.
--]]

logging = false
lighting = {['56']=true} -- Array of applications that are used for lighting
huePort = 5435


server = require('socket').udp()

sKey = 'pre'..event.dst
toSet = true
val = event.getvalue()
comp = val
parts = string.split(event.dst, '/')
net = tonumber(parts[1]); app = tonumber(parts[2]); group = tonumber(parts[3])

if val == 0 and GetCBusRampRate(net, app, group) > 0 then
  if logging then log('Sending zero for '..event.dst) end
  server:sendto(event.dst.."<"..val, '127.0.0.1', huePort)
  do return end
end

pre = storage.get(sKey, nil)
if tonumber(val) then comp = string.format('%.3f', val) end
if pre ~= nil then
  if comp == pre then
    toSet = false
    if logging and not toSet then log('Not sending '..event.dst..' to '..comp..', previous value is '..pre) end
  end
else
  pre = 'not recorded'
end

-- Send an event to publish to bridge if changed
if toSet then
  if logging then log('Sending '..event.dst..' value '..comp..', previous='..pre) end

  server:sendto(event.dst.."/"..val, '127.0.0.1', huePort)
end